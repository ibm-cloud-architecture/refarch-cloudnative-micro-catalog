sudo: required
language: java
jdk:
  - openjdk8
env:
  global:
    - IMAGE_NAME=bluecompute-catalog
    - RELEASE_NAME=catalog
    - TAG=travis-latest
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - elasticsearch
      - mysql
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Get script with inventory data
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/spring/scripts/mysql_data.sql
      # Wait for MySQL to start, then load it with catalog data
      - until mysql -h 127.0.0.1 -P 3306 -uroot <mysql_data.sql; do echo "waiting for mysql"; sleep 1; done; echo "Loaded data into database"
      # Start inventory container
      - docker run --net=host --name inventory -d -p 8080:8080 -e MYSQL_URI="mysql://root@127.0.0.1:3306/inventorydb" ibmcase/bluecompute-inventory:0.5.0
      # Wait for elasticsearch and inventory to start
      - sleep 25
      # Test Inventory
      - curl http://127.0.0.1:8080/micro/inventory
      script:
      # Gradle Build
      - ./gradlew build -x test
      # Start Application
      - java -jar build/libs/micro-catalog-0.0.1.jar &
      # Wait for the Inventory container to start accepting connections
      - sleep 25
      # Run Catalog API Test
      # TODO: Test more APIs, perhaps with a separate script
      - curl http://127.0.0.1:8081/micro/items
    - stage: docker build, deploy, and test
      services:
      - elasticsearch
      - mysql
      - docker
      install:
        - true
      before_script:
      # Get script with inventory data
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/spring/scripts/mysql_data.sql
      # Wait for MySQL to start, then load it with catalog data
      - until mysql -h 127.0.0.1 -P 3306 -uroot <mysql_data.sql; do echo "waiting for mysql"; sleep 1; done; echo "Loaded data into database"
      # Start inventory container
      - docker run --net=host --name inventory -d -p 8080:8080 -e MYSQL_URI="mysql://root@127.0.0.1:3306/inventorydb" ibmcase/bluecompute-inventory:0.5.0
      # Wait for elasticsearch and inventory to start
      - sleep 25
      # Test Inventory
      - curl http://127.0.0.1:8080/micro/inventory
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Catalog Container and Connect to local MySQL Service
      - docker run --net=host --name catalog -e ELASTICSEARCH_URI="http://127.0.0.1:9200" -e INVENTORY_URL="http://127.0.0.1:8080" -p 8081:8081 -d "${IMAGE_NAME}:${TAG}"
      # Wait for the Catalog container to start accepting connections
      - sleep 25
      # Check that the Catalog container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs catalog
      # Run Catalog API Test
      # TODO: Test more APIs, perhaps with a separate script
      - curl http://127.0.0.1:8081/micro/items
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      - CHANGE_MINIKUBE_NONE_USER=true
      install:
        - true
      before_script:
      # Install nsenter, which is needed for minikube to work
      - bash scripts/install_nsenter.sh 
      # Download kubectl, which is a requirement for using minikube.
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      # Download minikube.
      - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - sudo minikube start --vm-driver=none --kubernetes-version=v1.9.0
      # Fix the kubectl context, as it's often stale.
      - minikube update-context
      # Getting ip for testing
      - minikube ip
      # Wait for Minikube to be up and ready.
      - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      # Set minikube Docker Registry to be the local one
      #- minikube docker-env
      #- eval $(minikube docker-env)
      # Download Helm CLI
      - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh && rm get_helm.sh
      # Create Tiller Service Account
      - kubectl -n kube-system create sa tiller && kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
      # Install Helm on Minikube
      - helm init --service-account tiller
      # Wait for helm to be ready
      - until helm list; do echo "waiting for helm to be ready"; sleep 1; done
      # Add incubator and bluecompute-charts Helm repos
      - helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
      - helm repo add ibmcase-charts https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-kubernetes/spring/docs/charts
      script:
      # Get cluster info
      - kubectl cluster-info
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Download Catalog chart dependencies (MySQL)
      - cd chart/catalog; helm dependency update; cd ../..
      # helm lint
      - helm lint chart/catalog
      # helm package
      - helm package chart/catalog
      # helm install Catalog from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/catalog/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install catalog --set service.type=NodePort,image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never catalog-${CHART_VERSION}.tgz
      # Wait for Catalog to be ready
      - kubectl get deployments ${RELEASE_NAME}-catalog -o yaml
      - READY=$(kubectl get deployments ${RELEASE_NAME}-catalog -o yaml | grep "readyReplicas" | awk '{print $2}')
      - echo $READY
      - until [ -n "$READY" ] && [ ${READY} -ge 1 ]; do READY=$(kubectl get deployments ${RELEASE_NAME}-catalog -o yaml | grep "readyReplicas" | awk '{print $2}'); kubectl get deployments -o wide; echo "Waiting for catalog to be ready"; sleep 10; done
      # Wait for Catalog deployment to start accepting connections
      - sleep 35
      # Run Catalog API Test
      - NODE_PORT=$(kubectl get service ${RELEASE_NAME}-catalog -o=jsonpath='{.spec.ports[0].nodePort}')
      - curl http://$(minikube ip):${NODE_PORT}/micro/items
